// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/TremblingV5/DouTok/applications/api/biz/handler"
	"github.com/TremblingV5/DouTok/applications/api/initialize"
	"github.com/TremblingV5/DouTok/applications/api/initialize/rpc"
	"github.com/TremblingV5/DouTok/kitex_gen/message"
	"github.com/TremblingV5/DouTok/pkg/errno"
	"github.com/hertz-contrib/jwt"

	api "github.com/TremblingV5/DouTok/applications/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
)

// MessageChat .
//
//	@Tags		Message聊天相关
//
//	@Summary	获取和某人的聊天记录
//	@Description
//	@Param		req		query		api.DouyinMessageChatRequest	true	"获取聊天记录的参数"
//	@Success	200		{object}	message.DouyinMessageChatResponse
//	@Failure	default	{object}	api.DouyinMessageChatResponse
//	@router		/douyin/message/chat [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinMessageChatRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		handler.SendResponse(c, handler.BuildMessageChatResp(errno.ErrBind))
		return
	}

	userId := int64(jwt.ExtractClaims(ctx, c)[initialize.AuthMiddleware.IdentityKey].(float64))

	resp, err := rpc.MessageChat(ctx, rpc.MessageClient, &message.DouyinMessageChatRequest{
		UserId:     userId,
		ToUserId:   req.ToUserId,
		PreMsgTime: req.PreMsgTime,
	})
	if err != nil {
		handler.SendResponse(c, handler.BuildMessageChatResp(errno.ConvertErr(err)))
		return
	}
	// TODO 此处直接返回了 rpc 的 resp
	handler.SendResponse(c, resp)
}

// MessageAction .
//
//	@Tags		Message聊天相关
//
//	@Summary	发送消息操作
//	@Description
//	@Param		req		body		api.DouyinMessageActionRequest	true	"发送的消息的相关信息"
//	@Success	200		{object}	message.DouyinMessageActionResponse
//	@Failure	default	{object}	api.DouyinMessageActionResponse
//	@router		/douyin/message/action [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinMessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		handler.SendResponse(c, handler.BuildMessageActionResp(errno.ErrBind))
		return
	}

	userId := int64(jwt.ExtractClaims(ctx, c)[initialize.AuthMiddleware.IdentityKey].(float64))

	resp, err := rpc.MessageAction(ctx, rpc.MessageClient, &message.DouyinMessageActionRequest{
		UserId:     userId,
		ToUserId:   req.ToUserId,
		ActionType: req.ActionType,
		Content:    req.Content,
	})
	if err != nil {
		handler.SendResponse(c, handler.BuildMessageActionResp(errno.ConvertErr(err)))
		return
	}
	handler.SendResponse(c, resp)
	//chat.ServeWs(ctx, c)
}
